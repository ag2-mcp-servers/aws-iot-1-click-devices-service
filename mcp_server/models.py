# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T12:03:28+00:00

from __future__ import annotations

from datetime import datetime
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, conint, constr


class Attributes(BaseModel):
    pass


class ClaimDevicesByClaimCodeRequest(BaseModel):
    pass


class DescribeDeviceRequest(BaseModel):
    pass


class ForbiddenException(RootModel[Any]):
    root: Any


class GetDeviceMethodsRequest(BaseModel):
    pass


class InitiateDeviceClaimRequest(BaseModel):
    pass


class InternalFailureException(RootModel[Any]):
    root: Any


class InvalidRequestException(RootModel[Any]):
    root: Any


class ListDeviceEventsRequest(BaseModel):
    pass


class ListDevicesRequest(BaseModel):
    pass


class ListTagsForResourceRequest(BaseModel):
    pass


class MaxResults(RootModel[conint(ge=1, le=250)]):
    root: conint(ge=1, le=250)


class PreconditionFailedException(RootModel[Any]):
    root: Any


class RangeNotSatisfiableException(RootModel[Any]):
    root: Any


class ResourceConflictException(RootModel[Any]):
    root: Any


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class UnclaimDeviceRequest(BaseModel):
    pass


class UntagResourceRequest(BaseModel):
    pass


class UpdateDeviceStateResponse(BaseModel):
    pass


class FieldBoolean(RootModel[bool]):
    root: bool


class FieldDoubleMin0Max100(RootModel[float]):
    root: float


class FieldInteger(RootModel[int]):
    root: int


class FieldString(RootModel[str]):
    root: str


class FieldStringMin12Max40(RootModel[constr(min_length=12, max_length=40)]):
    root: constr(min_length=12, max_length=40)


class FieldTimestampIso8601(RootModel[datetime]):
    root: datetime


class DevicesDeviceIdFinalizeClaimPutRequest(BaseModel):
    tags: Optional[Dict[str, FieldString]] = Field(
        None,
        description='<p>A collection of key/value pairs defining the resource tags. For example, {\n "tags": {"key1": "value1", "key2": "value2"} }. For more information, see <a href="https://aws.amazon.com/answers/account-management/aws-tagging-strategies/">AWS\n Tagging Strategies</a>.</p><p>\n \n </p>',
    )


class DeviceMethod(BaseModel):
    DeviceType: Optional[FieldString] = None
    MethodName: Optional[FieldString] = None


class DevicesDeviceIdMethodsPostRequest(BaseModel):
    deviceMethod: Optional[DeviceMethod] = Field(
        None, description='The device method to invoke.'
    )
    deviceMethodParameters: Optional[str] = Field(
        None,
        description='A JSON encoded string containing the device method request parameters.',
    )


class DevicesDeviceIdStatePutRequest(BaseModel):
    enabled: Optional[bool] = Field(
        None,
        description='If true, the device is enabled. If false, the device is\n disabled.',
    )


class TagsResourceArnPostRequest(BaseModel):
    tags: Dict[str, FieldString] = Field(
        ...,
        description='<p>A collection of key/value pairs defining the resource tags. For example, {\n "tags": {"key1": "value1", "key2": "value2"} }. For more information, see <a href="https://aws.amazon.com/answers/account-management/aws-tagging-strategies/">AWS\n Tagging Strategies</a>.</p><p>\n \n </p>',
    )


class TagKeys(RootModel[List[FieldString]]):
    root: List[FieldString]


class ClaimDevicesByClaimCodeResponse(BaseModel):
    ClaimCode: Optional[FieldStringMin12Max40] = None
    Total: Optional[FieldInteger] = None


class Device(BaseModel):
    Attributes_1: Optional[Attributes] = Field(None, alias='Attributes')
    DeviceId: Optional[FieldString] = None
    Type: Optional[FieldString] = None


class DeviceAttributes(RootModel[Optional[Dict[str, FieldString]]]):
    root: Optional[Dict[str, FieldString]] = None


class DeviceEvent(BaseModel):
    Device_1: Optional[Device] = Field(None, alias='Device')
    StdEvent: Optional[FieldString] = None


class FinalizeDeviceClaimResponse(BaseModel):
    State: Optional[FieldString] = None


class InitiateDeviceClaimResponse(BaseModel):
    State: Optional[FieldString] = None


class InvokeDeviceMethodRequest(BaseModel):
    DeviceMethod_1: Optional[DeviceMethod] = Field(None, alias='DeviceMethod')
    DeviceMethodParameters: Optional[FieldString] = None


class InvokeDeviceMethodResponse(BaseModel):
    DeviceMethodResponse: Optional[FieldString] = None


class UnclaimDeviceResponse(BaseModel):
    State: Optional[FieldString] = None


class UpdateDeviceStateRequest(BaseModel):
    Enabled: Optional[FieldBoolean] = None


class FieldListOfDeviceEvent(RootModel[List[DeviceEvent]]):
    root: List[DeviceEvent]


class FieldListOfDeviceMethod(RootModel[List[DeviceMethod]]):
    root: List[DeviceMethod]


class FieldListOfString(RootModel[List[FieldString]]):
    root: List[FieldString]


class FieldMapOfString(RootModel[Optional[Dict[str, FieldString]]]):
    root: Optional[Dict[str, FieldString]] = None


class DeviceDescription(BaseModel):
    Arn: Optional[FieldString] = None
    Attributes: Optional[DeviceAttributes] = None
    DeviceId: Optional[FieldString] = None
    Enabled: Optional[FieldBoolean] = None
    RemainingLife: Optional[FieldDoubleMin0Max100] = None
    Tags: Optional[FieldMapOfString] = None
    Type: Optional[FieldString] = None


class FinalizeDeviceClaimRequest(BaseModel):
    Tags: Optional[FieldMapOfString] = None


class GetDeviceMethodsResponse(BaseModel):
    DeviceMethods: Optional[FieldListOfDeviceMethod] = None


class ListDeviceEventsResponse(BaseModel):
    Events: Optional[FieldListOfDeviceEvent] = None
    NextToken: Optional[FieldString] = None


class ListTagsForResourceResponse(BaseModel):
    Tags: Optional[FieldMapOfString] = None


class TagResourceRequest(BaseModel):
    Tags: FieldMapOfString


class FieldListOfDeviceDescription(RootModel[List[DeviceDescription]]):
    root: List[DeviceDescription]


class DescribeDeviceResponse(BaseModel):
    DeviceDescription_1: Optional[DeviceDescription] = Field(
        None, alias='DeviceDescription'
    )


class ListDevicesResponse(BaseModel):
    Devices: Optional[FieldListOfDeviceDescription] = None
    NextToken: Optional[FieldString] = None
